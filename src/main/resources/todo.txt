Basic Concept:
    - Track Players Playtime using the Statistic "PLAY_ONE_MINUTE"
    - Compare the Statistic Value to different Values of Different Rewards
    - Types of Rewards:
        - REAL_TIME     : Uses the Real World Clock, is always incrementing even if the Server is offline
        - SESSION_TIME  : Calculate a Session Time using the Total Playertime and a Cached Playertime from Login
        - PLAY_TIME     : Uses the Statistic "PLAY_ONE_MINUTE"
        - AFK_TIME      : Counts the AFK-Time
        - OFFLINE_TIME  : Counts the Time between Login and last Logout

    - Saving the following:
        - All Rewards that got earnt and aren't repeating, get saved with a value of -1L
        - Repeating Session Rewards don´t get saved at all (as they anyways reset with each login)
        - Repating Playtime Rewards get saved with their last-earned timestamp (Playtime in ms)
            -> If this Reward wasn´t earned at least once, upon a Players Login their current Playtime will get stored
            -> If a new Player logs in, his playtime is effectively 0ms. This would cause errors later, so new Players
                get offset with 100ms for their first Rewards.
        - Repeating Global Rewards get saved with the last earned ms timestamp (Using System#currentTimeMillis())

    - Easy Input Format for time (Example from Siemens Simatic):
            - T#5d20h23m56s -> calculates to the corresponding amount of ms
            - Available Time keys (not Case-sensitive):
                - #D -> Days
                - #h -> Hours
                - #m -> Minutes
                - #s -> Seconds

Ideas:
    - Custom Advancements:
        Softdepending on CrazyAdvancementsAPI: https://www.spigotmc.org/resources/crazy-advancements-api.51741/
        or including this: https://www.spigotmc.org/threads/advancement-creator-rapid-advancement-creation-library.293465/

    - PlayerData File Storage, add a last saved timestamp to user
        - Run an async, scheduled routine to clean up older PlayerData to free up diskspace & preventing giant files
            - Is this useful?
        - Maybe create Offlinetime Rewards using this?

    - GUI to create/modify & manage Rewards

    - Allow Players to Opt-In for more data collection:
        - Collect Data how many Rewards are registered, and which functions of the Rewards get used.


Notes:
    - Maybe add Language Detection (Using Player#getLocale) and allow multiple Language Files
    - Maybe use Luckos commodore, making commands look nicer